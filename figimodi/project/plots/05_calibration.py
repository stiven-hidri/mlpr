import matplotlib.pyplot as plt 
import numpy as np

if __name__ == '__main__':
    TPR_log = np.load('..\\data\\01_log-reg_TPR.npy')
    FPR_log = np.load('..\\data\\01_log-reg_FPR.npy')
    FNR_log = np.load('..\\data\\01_log-reg_FNR.npy')
    FPR_log_eval = np.load('..\\data\\01_log-reg_eval_FPR.npy')
    FNR_log_eval = np.load('..\\data\\01_log-reg_eval_FNR.npy')
    actualDCF_log = np.load('..\\data\\01_log-reg_actualDCF.npy')
    actualDCF_log_c_mvg = np.load('..\\data\\01_log-reg_actualDCF_c_mvg.npy')
    actualDCF_log_c_qlog = np.load('..\\data\\01_log-reg_actualDCF_c_q-log.npy')
    minDCF_log = np.load('..\\data\\01_log-reg_minDCF.npy')
    minDCF_log_c_qlog = np.load('..\\data\\01_log-reg_minDCF_c_q-log.npy')

    TPR_svm = np.load('..\\data\\02_svm_TPR.npy')
    FPR_svm = np.load('..\\data\\02_svm_FPR.npy')
    FNR_svm = np.load('..\\data\\02_svm_FNR.npy')
    FPR_svm_eval = np.load('..\\data\\02_svm_eval_FPR.npy')
    FNR_svm_eval = np.load('..\\data\\02_svm_eval_FNR.npy')
    actualDCF_svm = np.load('..\\data\\02_svm_actualDCF.npy')
    actualDCF_svm_c_mvg = np.load('..\\data\\02_svm_actualDCF_c_mvg.npy')
    actualDCF_svm_c_qlog = np.load('..\\data\\02_svm_actualDCF_c_q-log.npy')
    # actualDCF_svm_c_linear_log = np.load('..\\data\\02_svm_actualDCF_c_linear-log.npy')
    minDCF_svm = np.load('..\\data\\02_svm_minDCF.npy')
    minDCF_svm_c_mvg = np.load('..\\data\\02_svm_minDCF_c_mvg.npy')
    minDCF_svm_c_qlog = np.load('..\\data\\02_svm_minDCF_c_q-log.npy')

    TPR_gmm = np.load('..\\data\\03_gmm_TPR.npy')
    FPR_gmm = np.load('..\\data\\03_gmm_FPR.npy')
    FNR_gmm = np.load('..\\data\\03_gmm_FNR.npy')
    FPR_gmm_eval = np.load('..\\data\\03_gmm_eval_FPR.npy')
    FNR_gmm_eval = np.load('..\\data\\03_gmm_eval_FNR.npy')
    actualDCF_gmm = np.load('..\\data\\03_gmm_actualDCF.npy')
    actualDCF_gmm_c_mvg = np.load('..\\data\\03_gmm_actualDCF_c_mvg.npy')
    actualDCF_gmm_c_qlog = np.load('..\\data\\03_gmm_actualDCF_c_q-log.npy')
    # actualDCF_gmm_c_linear_log = np.load('..\\data\\03_gmm_actualDCF_c_linear-log.npy')
    minDCF_gmm = np.load('..\\data\\03_gmm_minDCF.npy')
    minDCF_gmm_c_qlog = np.load('..\\data\\03_gmm_minDCF_c_q-log.npy')

    plt.figure()
    plt.plot(FPR_log, TPR_log, label='Q-Log-Reg')
    plt.plot(FPR_svm, TPR_svm, label='SVM Poly(2)')
    plt.plot(FPR_gmm, TPR_gmm, label='GMM')
    plt.grid()
    plt.legend(loc='lower right')
    plt.savefig('05_calibration\\ROC.png')
    plt.close()

    plt.figure()
    plt.plot(FPR_log, FNR_log, label='Q-Log-Reg')
    plt.plot(FPR_svm, FNR_svm, label='SVM Poly(2)')
    plt.plot(FPR_gmm, FNR_gmm, label='GMM')
    plt.grid()
    plt.xscale('log')
    plt.yscale('log')
    # plt.ylim([1e-3, 1])
    # plt.xlim([1e-3, 1])
    plt.ylabel('False Negative Rate')
    plt.xlabel('False Positive Rate')
    plt.legend(loc='upper right')
    plt.savefig('05_calibration\\DET.png')
    plt.close()

    plt.figure()
    plt.plot(FPR_log_eval, FNR_log_eval, label='Q-Log-Reg')
    plt.plot(FPR_svm_eval, FNR_svm_eval, label='SVM Poly(2)')
    plt.plot(FPR_gmm_eval, FNR_gmm_eval, label='GMM')
    plt.grid()
    plt.xscale('log')
    plt.yscale('log')
    plt.ylabel('False Negative Rate')
    plt.xlabel('False Positive Rate')
    # plt.ylim([1e-3, 1])
    # plt.xlim([1e-3, 1])
    plt.legend(loc='upper right')
    plt.savefig('05_calibration\\DET_eval.png')
    plt.close()

    effPriorLogOdds = np.linspace(-4, 4, 20)
    plt.plot(effPriorLogOdds, actualDCF_log, label='actualDCF Q-Log-Reg')
    plt.plot(effPriorLogOdds, minDCF_log, label='minDCF Q-Log-Reg', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_svm, label='actualDCF SVM Poly(2)')
    plt.plot(effPriorLogOdds, minDCF_svm, label='minDCF SVM Poly(2)', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_gmm, label='actualDCF GMM')
    plt.plot(effPriorLogOdds, minDCF_gmm, label='minDCF GMM', linestyle='--')
    plt.ylim([0, 0.7])
    plt.xlim([-4, 4])
    plt.xlabel('log(π/1-π)')
    plt.ylabel('DCF')
    plt.legend(loc='upper left')
    plt.savefig('05_calibration\\bayes_errors')
    plt.close()

    effPriorLogOdds = np.linspace(-4, 4, 20)
    plt.plot(effPriorLogOdds, actualDCF_log_c_qlog, label='actualDCF Q-Log-Reg')
    plt.plot(effPriorLogOdds, minDCF_log_c_qlog, label='minDCF Q-Log-Reg', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_svm_c_qlog, label='actualDCF SVM Poly(2)')
    plt.plot(effPriorLogOdds, minDCF_svm_c_qlog, label='minDCF SVM Poly(2)', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_gmm_c_qlog, label='actualDCF GMM')
    plt.plot(effPriorLogOdds, minDCF_gmm_c_qlog, label='minDCF GMM', linestyle='--')
    plt.ylim([0, 0.7])
    plt.xlim([-4, 4])
    plt.xlabel('log(π/1-π)')
    plt.ylabel('DCF')
    plt.legend(loc='upper left')
    plt.savefig('05_calibration\\bayes_errors_calibrated_qlog')
    plt.close()

    effPriorLogOdds = np.linspace(-4, 4, 20)
    plt.plot(effPriorLogOdds, actualDCF_log, label='actualDCF Q-Log-Reg')
    plt.plot(effPriorLogOdds, minDCF_log, label='minDCF Q-Log-Reg', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_svm_c_mvg, label='actualDCF SVM Poly(2)')
    plt.plot(effPriorLogOdds, minDCF_svm_c_mvg, label='minDCF SVM Poly(2)', linestyle='--')
    plt.plot(effPriorLogOdds, actualDCF_gmm, label='actualDCF GMM')
    plt.plot(effPriorLogOdds, minDCF_gmm, label='minDCF GMM', linestyle='--')
    plt.ylim([0, 0.7])
    plt.xlim([-4, 4])
    plt.xlabel('log(π/1-π)')
    plt.ylabel('DCF')
    plt.legend(loc='upper left')
    plt.savefig('05_calibration\\bayes_errors_calibrated_mvg')
    plt.close()

    # effPriorLogOdds = np.linspace(-4, 4, 20)
    # plt.plot(effPriorLogOdds, actualDCF_log, label='actualDCF Q-Log-Reg')
    # plt.plot(effPriorLogOdds, minDCF_log, label='minDCF Q-Log-Reg', linestyle='--')
    # plt.plot(effPriorLogOdds, actualDCF_svm_c_linear_log, label='actualDCF SVM Poly(2)')
    # plt.plot(effPriorLogOdds, minDCF_svm, label='minDCF SVM Poly(2)', linestyle='--')
    # plt.plot(effPriorLogOdds, actualDCF_gmm, label='actualDCF GMM')
    # plt.plot(effPriorLogOdds, minDCF_gmm, label='minDCF GMM', linestyle='--')
    # plt.ylim([0, 0.7])
    # plt.xlim([-4, 4])
    # plt.xlabel('log(π/1-π)')
    # plt.ylabel('DCF')
    # plt.legend(loc='upper left')
    # plt.savefig('05_calibration\\bayes_errors_calibrated_linear-log')
    # plt.close()